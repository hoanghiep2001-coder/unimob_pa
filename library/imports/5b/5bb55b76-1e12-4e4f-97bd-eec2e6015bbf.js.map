{"version":3,"sources":["assets\\Scripts\\PuzzlueBoard.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Piece } from \"./PuzzlePiece\";\r\nimport { PuzzleScene } from \"./PuzzleScene\";\r\n\r\nconst { ccclass, property, executeInEditMode } = cc._decorator;\r\n\r\n@ccclass\r\n// @executeInEditMode\r\nexport class PuzzleBoard extends cc.Component {\r\n\r\n    @property(cc.Prefab)\r\n    private piecePrefab: cc.Prefab = null;\r\n    @property(cc.Integer)\r\n    private colNum: number = 5;\r\n    @property(cc.Integer)\r\n    private colSpace: number = 5;\r\n\r\n    private colWidth: number = 0;\r\n    private pieceMap: Array<Array<Piece>>;\r\n    private blankPiece: Piece = null;\r\n\r\n    private puzzleScene: PuzzleScene = null;\r\n\r\n    init(puzzleScene: PuzzleScene) {\r\n        this.puzzleScene = puzzleScene;\r\n        this.addListeners();\r\n    }\r\n\r\n    public reset(colNum?: number) {\r\n        this.colNum = colNum;\r\n        this.colWidth = (this.node.width - this.colSpace * (this.colNum + 1)) / this.colNum;\r\n        this.node.removeAllChildren();\r\n        this.pieceMap = [];\r\n\r\n        for (let x = 0; x < this.colNum; x++) {\r\n            this.pieceMap[x] = [];\r\n            for (let y = 0; y < this.colNum; y++) {\r\n                let pieceNode = cc.instantiate(this.piecePrefab);\r\n                this.node.addChild(pieceNode);\r\n                pieceNode.x = x * (this.colWidth + this.colSpace) + this.colSpace;\r\n                pieceNode.y = y * (this.colWidth + this.colSpace) + this.colSpace;\r\n                this.pieceMap[x][y] = pieceNode.getComponent(Piece);\r\n                this.pieceMap[x][y].init(x, y, this.colNum, this.colWidth);\r\n                if (this.pieceMap[x][y].isBlank) {\r\n                    this.blankPiece = this.pieceMap[x][y];\r\n                }\r\n            }\r\n        }\r\n        this.shuffle();\r\n\r\n        // for (let x = 0; x < this.colNum; x++) {\r\n        //     this.pieceMap[x] = [];\r\n        //     for (let y = 0; y < this.colNum; y++) {\r\n        //         let pieceNode = cc.instantiate(this.piecePrefab);\r\n        //         this.node.addChild(pieceNode);\r\n        //         pieceNode.x = x * (this.node.width / this.colNum);\r\n        //         pieceNode.y = y * (this.node.height / this.colNum);\r\n        //         this.pieceMap[x][y] = pieceNode.getComponent(Piece);\r\n        //         this.pieceMap[x][y].init(x, y, this.colNum, this.colWidth);\r\n        //         if (this.pieceMap[x][y].isBlank) {\r\n        //             this.blankPiece = this.pieceMap[x][y];\r\n        //         }\r\n        //     }\r\n        // }\r\n        // this.shuffle();\r\n    }\r\n\r\n    private shuffle() {\r\n        for (let i = 0; i < 1000; i++) {\r\n            let nearPieces = this.getNearPieces(this.blankPiece);\r\n            let n = Math.floor(Math.random() * nearPieces.length);\r\n            this.exchangeTwoPiece(this.blankPiece, nearPieces[n]);\r\n        }\r\n    }\r\n\r\n    private onBoadTouch(event: cc.Event.EventTouch) {\r\n        let worldPos = event.getLocation();\r\n        let localPos = this.node.convertToNodeSpaceAR(worldPos);\r\n        let x = Math.floor((localPos.x - this.colSpace) / (this.colWidth + this.colSpace));\r\n        let y = Math.floor((localPos.y - this.colSpace) / (this.colWidth + this.colSpace));\r\n        this.puzzleScene.onBoardTouch(x, y);\r\n    }\r\n\r\n    public movePiece(x, y): boolean {\r\n        let piece = this.pieceMap[x][y];\r\n        let nearPieces = this.getNearPieces(piece);\r\n        for (let nearPiece of nearPieces) {\r\n            if (nearPiece.isBlank) {\r\n                this.exchangeTwoPiece(piece, nearPiece);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public judgeWin(): boolean {\r\n        for (let x = 0; x < this.colNum; x++) {\r\n            for (let y = 0; y < this.colNum; y++) {\r\n                if(!this.pieceMap[x][y].isRight) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        this.blankPiece.node.active = true;\r\n        return true;\r\n    }\r\n\r\n    private getNearPieces(piece: Piece): Array<Piece> {\r\n        let nearPieces = [];\r\n\r\n        if (piece.curCol > 0) { // left\r\n            nearPieces.push(this.pieceMap[piece.curCol - 1][piece.curRow]);\r\n        }\r\n        if (piece.curCol < this.colNum - 1) { // right\r\n            nearPieces.push(this.pieceMap[piece.curCol + 1][piece.curRow]);\r\n        }\r\n        if (piece.curRow > 0) { // bottom\r\n            nearPieces.push(this.pieceMap[piece.curCol][piece.curRow - 1]);\r\n        }\r\n        if (piece.curRow < this.colNum - 1) { // top\r\n            nearPieces.push(this.pieceMap[piece.curCol][piece.curRow + 1]);\r\n        }\r\n        return nearPieces;\r\n    }\r\n\r\n    public exchangeTwoPiece(piece1: Piece, piece2: Piece) {\r\n        this.pieceMap[piece2.curCol][piece2.curRow] = piece1;\r\n        this.pieceMap[piece1.curCol][piece1.curRow] = piece2;\r\n\r\n        [piece1.curCol, piece2.curCol] = [piece2.curCol, piece1.curCol];\r\n        [piece1.curRow, piece2.curRow] = [piece2.curRow, piece1.curRow];\r\n\r\n        [piece1.node.position, piece2.node.position] = [piece2.node.position, piece1.node.position];\r\n    }\r\n\r\n    private addListeners() {\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onBoadTouch, this);\r\n    }\r\n\r\n    private removeListeners() {\r\n\r\n    }\r\n\r\n}"]}