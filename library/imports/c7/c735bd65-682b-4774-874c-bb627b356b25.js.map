{"version":3,"sources":["assets\\Scripts\\PuzzleScene.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { CONST } from \"./Const/CONST\";\r\nimport GameInfo from \"./Const/GameInfo\";\r\nimport { GameController } from \"./Controller/GameController\";\r\nimport { SoundController } from \"./Controller/SoundController\";\r\nimport { STATE } from \"./PuzzleConstants\";\r\nimport { PuzzleBoard } from \"./PuzzlueBoard\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport class PuzzleScene extends cc.Component {\r\n    @property(GameController)\r\n    GameController: GameController = null;\r\n\r\n    @property(cc.Node)\r\n    btnHint: cc.Node = null;\r\n    @property(PuzzleBoard)\r\n    private board: PuzzleBoard = null;\r\n    @property(cc.Node)\r\n    private winPanel: cc.Node = null;\r\n\r\n    private level: number = 3;\r\n    public state: STATE = STATE.NONE;\r\n\r\n    start() {\r\n        this.addListeners();\r\n        this.board.init(this);\r\n        this.startGame();\r\n    }\r\n\r\n    private startGame() {\r\n        // this.winPanel.active = false;\r\n        this.state = STATE.START;\r\n        this.board.reset(this.level);\r\n    }\r\n\r\n    private overGame() {\r\n        // this.winPanel.opacity = 255;\r\n        this.winPanel.active = true;\r\n        this.state = STATE.OVER;\r\n\r\n        this.btnHint.children.forEach(child => {\r\n            child.color = cc.color(255, 184, 0, 255);\r\n        });\r\n\r\n        cc.tween(this.winPanel)\r\n            .to(0.5, { opacity: 255 }, { easing: cc.easing.smooth })\r\n            .call(() => {\r\n                let label = this.btnHint.getComponentInChildren(cc.Label);\r\n                label.string = 'DOWNLOAD';\r\n                label.node.color = cc.color(255, 255, 255, 255);\r\n                label.node.scale = 0.8;\r\n                this.btnHint.on(cc.Node.EventType.TOUCH_START, this.GameController.installHandle, this);\r\n            })\r\n            .start();\r\n\r\n\r\n        cc.tween(this.btnHint)\r\n            .repeatForever(\r\n                cc.tween(this.btnHint)\r\n                    .to(0.5, { scale: 1 }, { easing: cc.easing.smooth })\r\n                    .to(0.5, { scale: 1.06 }, { easing: cc.easing.elasticOut })\r\n            ).start();\r\n    }\r\n\r\n    public onBoardTouch(x: number, y: number) {\r\n        if (this.state = STATE.START) {\r\n            let isMove = this.board.movePiece(x, y);\r\n            if (!isMove) {\r\n                cc.log(\"wrong\");\r\n                SoundController.Instance(SoundController).playSound(CONST.SoundTrack.wrongSound);\r\n            } else {\r\n                SoundController.Instance(SoundController).playSound(CONST.SoundTrack.slideSound);\r\n\r\n                if (this.board.judgeWin()) {\r\n                    this.overGame();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public onBtnLevelEasy() {\r\n        this.level = 3;\r\n        this.startGame();\r\n    }\r\n\r\n    public onBtnLevelNormal() {\r\n        this.level = 5;\r\n        this.startGame();\r\n    }\r\n\r\n    public onBtnLevelHard() {\r\n        this.level = 10;\r\n        this.startGame();\r\n    }\r\n\r\n    onBtnRestart() {\r\n        this.startGame();\r\n    }\r\n\r\n    private addListeners() {\r\n        this.btnHint.on(cc.Node.EventType.TOUCH_START, this.activeHint, this);\r\n    }\r\n\r\n    private activeHint(): void {\r\n        console.log(\"Check\");\r\n\r\n        if (!GameInfo.isCanTouch) return;\r\n\r\n        GameInfo.isCanTouch = false;\r\n\r\n        this.winPanel.getComponent(cc.Animation).play();\r\n\r\n        this.scheduleOnce(() => GameInfo.isCanTouch = true, 1.1);\r\n\r\n        SoundController.Instance(SoundController).playSound(CONST.SoundTrack.clickBtnSound);\r\n    }\r\n\r\n    private removeListeners() {\r\n\r\n    }\r\n\r\n}\r\n"]}